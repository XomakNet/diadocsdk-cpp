// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Employees/Subscriptions/Subscription.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Employees/Subscriptions/Subscription.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Employees {
namespace Subscriptions {

namespace {

const ::google::protobuf::Descriptor* EmployeeSubscriptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmployeeSubscriptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscriptionsToUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscriptionsToUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* Subscription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Subscription_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Employees_2fSubscriptions_2fSubscription_2eproto() {
  protobuf_AddDesc_Employees_2fSubscriptions_2fSubscription_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Employees/Subscriptions/Subscription.proto");
  GOOGLE_CHECK(file != NULL);
  EmployeeSubscriptions_descriptor_ = file->message_type(0);
  static const int EmployeeSubscriptions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeSubscriptions, subscriptions_),
  };
  EmployeeSubscriptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmployeeSubscriptions_descriptor_,
      EmployeeSubscriptions::default_instance_,
      EmployeeSubscriptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeSubscriptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeSubscriptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmployeeSubscriptions));
  SubscriptionsToUpdate_descriptor_ = file->message_type(1);
  static const int SubscriptionsToUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionsToUpdate, subscriptions_),
  };
  SubscriptionsToUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscriptionsToUpdate_descriptor_,
      SubscriptionsToUpdate::default_instance_,
      SubscriptionsToUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionsToUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionsToUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscriptionsToUpdate));
  Subscription_descriptor_ = file->message_type(2);
  static const int Subscription_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription, issubscribed_),
  };
  Subscription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Subscription_descriptor_,
      Subscription::default_instance_,
      Subscription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Subscription));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Employees_2fSubscriptions_2fSubscription_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmployeeSubscriptions_descriptor_, &EmployeeSubscriptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscriptionsToUpdate_descriptor_, &SubscriptionsToUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Subscription_descriptor_, &Subscription::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Employees_2fSubscriptions_2fSubscription_2eproto() {
  delete EmployeeSubscriptions::default_instance_;
  delete EmployeeSubscriptions_reflection_;
  delete SubscriptionsToUpdate::default_instance_;
  delete SubscriptionsToUpdate_reflection_;
  delete Subscription::default_instance_;
  delete Subscription_reflection_;
}

void protobuf_AddDesc_Employees_2fSubscriptions_2fSubscription_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n*Employees/Subscriptions/Subscription.p"
    "roto\022(Diadoc.Api.Proto.Employees.Subscri"
    "ptions\"f\n\025EmployeeSubscriptions\022M\n\rSubsc"
    "riptions\030\001 \003(\01326.Diadoc.Api.Proto.Employ"
    "ees.Subscriptions.Subscription\"f\n\025Subscr"
    "iptionsToUpdate\022M\n\rSubscriptions\030\001 \003(\01326"
    ".Diadoc.Api.Proto.Employees.Subscription"
    "s.Subscription\"0\n\014Subscription\022\n\n\002Id\030\001 \002"
    "(\t\022\024\n\014IsSubscribed\030\002 \002(\010", 344);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Employees/Subscriptions/Subscription.proto", &protobuf_RegisterTypes);
  EmployeeSubscriptions::default_instance_ = new EmployeeSubscriptions();
  SubscriptionsToUpdate::default_instance_ = new SubscriptionsToUpdate();
  Subscription::default_instance_ = new Subscription();
  EmployeeSubscriptions::default_instance_->InitAsDefaultInstance();
  SubscriptionsToUpdate::default_instance_->InitAsDefaultInstance();
  Subscription::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Employees_2fSubscriptions_2fSubscription_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Employees_2fSubscriptions_2fSubscription_2eproto {
  StaticDescriptorInitializer_Employees_2fSubscriptions_2fSubscription_2eproto() {
    protobuf_AddDesc_Employees_2fSubscriptions_2fSubscription_2eproto();
  }
} static_descriptor_initializer_Employees_2fSubscriptions_2fSubscription_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int EmployeeSubscriptions::kSubscriptionsFieldNumber;
#endif  // !_MSC_VER

EmployeeSubscriptions::EmployeeSubscriptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Employees.Subscriptions.EmployeeSubscriptions)
}

void EmployeeSubscriptions::InitAsDefaultInstance() {
}

EmployeeSubscriptions::EmployeeSubscriptions(const EmployeeSubscriptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Employees.Subscriptions.EmployeeSubscriptions)
}

void EmployeeSubscriptions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmployeeSubscriptions::~EmployeeSubscriptions() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Employees.Subscriptions.EmployeeSubscriptions)
  SharedDtor();
}

void EmployeeSubscriptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EmployeeSubscriptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmployeeSubscriptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmployeeSubscriptions_descriptor_;
}

const EmployeeSubscriptions& EmployeeSubscriptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Employees_2fSubscriptions_2fSubscription_2eproto();
  return *default_instance_;
}

EmployeeSubscriptions* EmployeeSubscriptions::default_instance_ = NULL;

EmployeeSubscriptions* EmployeeSubscriptions::New() const {
  return new EmployeeSubscriptions;
}

void EmployeeSubscriptions::Clear() {
  subscriptions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmployeeSubscriptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Employees.Subscriptions.EmployeeSubscriptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Diadoc.Api.Proto.Employees.Subscriptions.Subscription Subscriptions = 1;
      case 1: {
        if (tag == 10) {
         parse_Subscriptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subscriptions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Subscriptions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Employees.Subscriptions.EmployeeSubscriptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Employees.Subscriptions.EmployeeSubscriptions)
  return false;
#undef DO_
}

void EmployeeSubscriptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Employees.Subscriptions.EmployeeSubscriptions)
  // repeated .Diadoc.Api.Proto.Employees.Subscriptions.Subscription Subscriptions = 1;
  for (int i = 0; i < this->subscriptions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->subscriptions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Employees.Subscriptions.EmployeeSubscriptions)
}

::google::protobuf::uint8* EmployeeSubscriptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Employees.Subscriptions.EmployeeSubscriptions)
  // repeated .Diadoc.Api.Proto.Employees.Subscriptions.Subscription Subscriptions = 1;
  for (int i = 0; i < this->subscriptions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->subscriptions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Employees.Subscriptions.EmployeeSubscriptions)
  return target;
}

int EmployeeSubscriptions::ByteSize() const {
  int total_size = 0;

  // repeated .Diadoc.Api.Proto.Employees.Subscriptions.Subscription Subscriptions = 1;
  total_size += 1 * this->subscriptions_size();
  for (int i = 0; i < this->subscriptions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subscriptions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmployeeSubscriptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmployeeSubscriptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmployeeSubscriptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmployeeSubscriptions::MergeFrom(const EmployeeSubscriptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  subscriptions_.MergeFrom(from.subscriptions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmployeeSubscriptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmployeeSubscriptions::CopyFrom(const EmployeeSubscriptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmployeeSubscriptions::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->subscriptions())) return false;
  return true;
}

void EmployeeSubscriptions::Swap(EmployeeSubscriptions* other) {
  if (other != this) {
    subscriptions_.Swap(&other->subscriptions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmployeeSubscriptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmployeeSubscriptions_descriptor_;
  metadata.reflection = EmployeeSubscriptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscriptionsToUpdate::kSubscriptionsFieldNumber;
#endif  // !_MSC_VER

SubscriptionsToUpdate::SubscriptionsToUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Employees.Subscriptions.SubscriptionsToUpdate)
}

void SubscriptionsToUpdate::InitAsDefaultInstance() {
}

SubscriptionsToUpdate::SubscriptionsToUpdate(const SubscriptionsToUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Employees.Subscriptions.SubscriptionsToUpdate)
}

void SubscriptionsToUpdate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscriptionsToUpdate::~SubscriptionsToUpdate() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Employees.Subscriptions.SubscriptionsToUpdate)
  SharedDtor();
}

void SubscriptionsToUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubscriptionsToUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscriptionsToUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscriptionsToUpdate_descriptor_;
}

const SubscriptionsToUpdate& SubscriptionsToUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Employees_2fSubscriptions_2fSubscription_2eproto();
  return *default_instance_;
}

SubscriptionsToUpdate* SubscriptionsToUpdate::default_instance_ = NULL;

SubscriptionsToUpdate* SubscriptionsToUpdate::New() const {
  return new SubscriptionsToUpdate;
}

void SubscriptionsToUpdate::Clear() {
  subscriptions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscriptionsToUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Employees.Subscriptions.SubscriptionsToUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Diadoc.Api.Proto.Employees.Subscriptions.Subscription Subscriptions = 1;
      case 1: {
        if (tag == 10) {
         parse_Subscriptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subscriptions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Subscriptions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Employees.Subscriptions.SubscriptionsToUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Employees.Subscriptions.SubscriptionsToUpdate)
  return false;
#undef DO_
}

void SubscriptionsToUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Employees.Subscriptions.SubscriptionsToUpdate)
  // repeated .Diadoc.Api.Proto.Employees.Subscriptions.Subscription Subscriptions = 1;
  for (int i = 0; i < this->subscriptions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->subscriptions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Employees.Subscriptions.SubscriptionsToUpdate)
}

::google::protobuf::uint8* SubscriptionsToUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Employees.Subscriptions.SubscriptionsToUpdate)
  // repeated .Diadoc.Api.Proto.Employees.Subscriptions.Subscription Subscriptions = 1;
  for (int i = 0; i < this->subscriptions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->subscriptions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Employees.Subscriptions.SubscriptionsToUpdate)
  return target;
}

int SubscriptionsToUpdate::ByteSize() const {
  int total_size = 0;

  // repeated .Diadoc.Api.Proto.Employees.Subscriptions.Subscription Subscriptions = 1;
  total_size += 1 * this->subscriptions_size();
  for (int i = 0; i < this->subscriptions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subscriptions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscriptionsToUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscriptionsToUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscriptionsToUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscriptionsToUpdate::MergeFrom(const SubscriptionsToUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  subscriptions_.MergeFrom(from.subscriptions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscriptionsToUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionsToUpdate::CopyFrom(const SubscriptionsToUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionsToUpdate::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->subscriptions())) return false;
  return true;
}

void SubscriptionsToUpdate::Swap(SubscriptionsToUpdate* other) {
  if (other != this) {
    subscriptions_.Swap(&other->subscriptions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscriptionsToUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscriptionsToUpdate_descriptor_;
  metadata.reflection = SubscriptionsToUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Subscription::kIdFieldNumber;
const int Subscription::kIsSubscribedFieldNumber;
#endif  // !_MSC_VER

Subscription::Subscription()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Employees.Subscriptions.Subscription)
}

void Subscription::InitAsDefaultInstance() {
}

Subscription::Subscription(const Subscription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Employees.Subscriptions.Subscription)
}

void Subscription::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issubscribed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Subscription::~Subscription() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Employees.Subscriptions.Subscription)
  SharedDtor();
}

void Subscription::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void Subscription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Subscription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Subscription_descriptor_;
}

const Subscription& Subscription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Employees_2fSubscriptions_2fSubscription_2eproto();
  return *default_instance_;
}

Subscription* Subscription::default_instance_ = NULL;

Subscription* Subscription::New() const {
  return new Subscription;
}

void Subscription::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    issubscribed_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Subscription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Employees.Subscriptions.Subscription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IsSubscribed;
        break;
      }

      // required bool IsSubscribed = 2;
      case 2: {
        if (tag == 16) {
         parse_IsSubscribed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issubscribed_)));
          set_has_issubscribed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Employees.Subscriptions.Subscription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Employees.Subscriptions.Subscription)
  return false;
#undef DO_
}

void Subscription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Employees.Subscriptions.Subscription)
  // required string Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required bool IsSubscribed = 2;
  if (has_issubscribed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->issubscribed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Employees.Subscriptions.Subscription)
}

::google::protobuf::uint8* Subscription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Employees.Subscriptions.Subscription)
  // required string Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required bool IsSubscribed = 2;
  if (has_issubscribed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->issubscribed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Employees.Subscriptions.Subscription)
  return target;
}

int Subscription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required bool IsSubscribed = 2;
    if (has_issubscribed()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Subscription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Subscription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Subscription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Subscription::MergeFrom(const Subscription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_issubscribed()) {
      set_issubscribed(from.issubscribed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Subscription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Subscription::CopyFrom(const Subscription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subscription::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Subscription::Swap(Subscription* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(issubscribed_, other->issubscribed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Subscription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Subscription_descriptor_;
  metadata.reflection = Subscription_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Subscriptions
}  // namespace Employees
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
