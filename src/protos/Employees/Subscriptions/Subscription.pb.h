// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Employees/Subscriptions/Subscription.proto

#ifndef PROTOBUF_Employees_2fSubscriptions_2fSubscription_2eproto__INCLUDED
#define PROTOBUF_Employees_2fSubscriptions_2fSubscription_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Employees {
namespace Subscriptions {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Employees_2fSubscriptions_2fSubscription_2eproto();
void protobuf_AssignDesc_Employees_2fSubscriptions_2fSubscription_2eproto();
void protobuf_ShutdownFile_Employees_2fSubscriptions_2fSubscription_2eproto();

class EmployeeSubscriptions;
class SubscriptionsToUpdate;
class Subscription;

// ===================================================================

class EmployeeSubscriptions : public ::google::protobuf::Message {
 public:
  EmployeeSubscriptions();
  virtual ~EmployeeSubscriptions();

  EmployeeSubscriptions(const EmployeeSubscriptions& from);

  inline EmployeeSubscriptions& operator=(const EmployeeSubscriptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmployeeSubscriptions& default_instance();

  void Swap(EmployeeSubscriptions* other);

  // implements Message ----------------------------------------------

  EmployeeSubscriptions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmployeeSubscriptions& from);
  void MergeFrom(const EmployeeSubscriptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Diadoc.Api.Proto.Employees.Subscriptions.Subscription Subscriptions = 1;
  inline int subscriptions_size() const;
  inline void clear_subscriptions();
  static const int kSubscriptionsFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Employees::Subscriptions::Subscription& subscriptions(int index) const;
  inline ::Diadoc::Api::Proto::Employees::Subscriptions::Subscription* mutable_subscriptions(int index);
  inline ::Diadoc::Api::Proto::Employees::Subscriptions::Subscription* add_subscriptions();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Employees::Subscriptions::Subscription >&
      subscriptions() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Employees::Subscriptions::Subscription >*
      mutable_subscriptions();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Employees.Subscriptions.EmployeeSubscriptions)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Employees::Subscriptions::Subscription > subscriptions_;
  friend void  protobuf_AddDesc_Employees_2fSubscriptions_2fSubscription_2eproto();
  friend void protobuf_AssignDesc_Employees_2fSubscriptions_2fSubscription_2eproto();
  friend void protobuf_ShutdownFile_Employees_2fSubscriptions_2fSubscription_2eproto();

  void InitAsDefaultInstance();
  static EmployeeSubscriptions* default_instance_;
};
// -------------------------------------------------------------------

class SubscriptionsToUpdate : public ::google::protobuf::Message {
 public:
  SubscriptionsToUpdate();
  virtual ~SubscriptionsToUpdate();

  SubscriptionsToUpdate(const SubscriptionsToUpdate& from);

  inline SubscriptionsToUpdate& operator=(const SubscriptionsToUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscriptionsToUpdate& default_instance();

  void Swap(SubscriptionsToUpdate* other);

  // implements Message ----------------------------------------------

  SubscriptionsToUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscriptionsToUpdate& from);
  void MergeFrom(const SubscriptionsToUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Diadoc.Api.Proto.Employees.Subscriptions.Subscription Subscriptions = 1;
  inline int subscriptions_size() const;
  inline void clear_subscriptions();
  static const int kSubscriptionsFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Employees::Subscriptions::Subscription& subscriptions(int index) const;
  inline ::Diadoc::Api::Proto::Employees::Subscriptions::Subscription* mutable_subscriptions(int index);
  inline ::Diadoc::Api::Proto::Employees::Subscriptions::Subscription* add_subscriptions();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Employees::Subscriptions::Subscription >&
      subscriptions() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Employees::Subscriptions::Subscription >*
      mutable_subscriptions();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Employees.Subscriptions.SubscriptionsToUpdate)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Employees::Subscriptions::Subscription > subscriptions_;
  friend void  protobuf_AddDesc_Employees_2fSubscriptions_2fSubscription_2eproto();
  friend void protobuf_AssignDesc_Employees_2fSubscriptions_2fSubscription_2eproto();
  friend void protobuf_ShutdownFile_Employees_2fSubscriptions_2fSubscription_2eproto();

  void InitAsDefaultInstance();
  static SubscriptionsToUpdate* default_instance_;
};
// -------------------------------------------------------------------

class Subscription : public ::google::protobuf::Message {
 public:
  Subscription();
  virtual ~Subscription();

  Subscription(const Subscription& from);

  inline Subscription& operator=(const Subscription& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Subscription& default_instance();

  void Swap(Subscription* other);

  // implements Message ----------------------------------------------

  Subscription* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Subscription& from);
  void MergeFrom(const Subscription& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required bool IsSubscribed = 2;
  inline bool has_issubscribed() const;
  inline void clear_issubscribed();
  static const int kIsSubscribedFieldNumber = 2;
  inline bool issubscribed() const;
  inline void set_issubscribed(bool value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Employees.Subscriptions.Subscription)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_issubscribed();
  inline void clear_has_issubscribed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  bool issubscribed_;
  friend void  protobuf_AddDesc_Employees_2fSubscriptions_2fSubscription_2eproto();
  friend void protobuf_AssignDesc_Employees_2fSubscriptions_2fSubscription_2eproto();
  friend void protobuf_ShutdownFile_Employees_2fSubscriptions_2fSubscription_2eproto();

  void InitAsDefaultInstance();
  static Subscription* default_instance_;
};
// ===================================================================


// ===================================================================

// EmployeeSubscriptions

// repeated .Diadoc.Api.Proto.Employees.Subscriptions.Subscription Subscriptions = 1;
inline int EmployeeSubscriptions::subscriptions_size() const {
  return subscriptions_.size();
}
inline void EmployeeSubscriptions::clear_subscriptions() {
  subscriptions_.Clear();
}
inline const ::Diadoc::Api::Proto::Employees::Subscriptions::Subscription& EmployeeSubscriptions::subscriptions(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.Subscriptions.EmployeeSubscriptions.Subscriptions)
  return subscriptions_.Get(index);
}
inline ::Diadoc::Api::Proto::Employees::Subscriptions::Subscription* EmployeeSubscriptions::mutable_subscriptions(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.Subscriptions.EmployeeSubscriptions.Subscriptions)
  return subscriptions_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Employees::Subscriptions::Subscription* EmployeeSubscriptions::add_subscriptions() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Employees.Subscriptions.EmployeeSubscriptions.Subscriptions)
  return subscriptions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Employees::Subscriptions::Subscription >&
EmployeeSubscriptions::subscriptions() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Employees.Subscriptions.EmployeeSubscriptions.Subscriptions)
  return subscriptions_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Employees::Subscriptions::Subscription >*
EmployeeSubscriptions::mutable_subscriptions() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Employees.Subscriptions.EmployeeSubscriptions.Subscriptions)
  return &subscriptions_;
}

// -------------------------------------------------------------------

// SubscriptionsToUpdate

// repeated .Diadoc.Api.Proto.Employees.Subscriptions.Subscription Subscriptions = 1;
inline int SubscriptionsToUpdate::subscriptions_size() const {
  return subscriptions_.size();
}
inline void SubscriptionsToUpdate::clear_subscriptions() {
  subscriptions_.Clear();
}
inline const ::Diadoc::Api::Proto::Employees::Subscriptions::Subscription& SubscriptionsToUpdate::subscriptions(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.Subscriptions.SubscriptionsToUpdate.Subscriptions)
  return subscriptions_.Get(index);
}
inline ::Diadoc::Api::Proto::Employees::Subscriptions::Subscription* SubscriptionsToUpdate::mutable_subscriptions(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.Subscriptions.SubscriptionsToUpdate.Subscriptions)
  return subscriptions_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Employees::Subscriptions::Subscription* SubscriptionsToUpdate::add_subscriptions() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Employees.Subscriptions.SubscriptionsToUpdate.Subscriptions)
  return subscriptions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Employees::Subscriptions::Subscription >&
SubscriptionsToUpdate::subscriptions() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Employees.Subscriptions.SubscriptionsToUpdate.Subscriptions)
  return subscriptions_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Employees::Subscriptions::Subscription >*
SubscriptionsToUpdate::mutable_subscriptions() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Employees.Subscriptions.SubscriptionsToUpdate.Subscriptions)
  return &subscriptions_;
}

// -------------------------------------------------------------------

// Subscription

// required string Id = 1;
inline bool Subscription::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Subscription::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Subscription::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Subscription::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Subscription::id() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.Subscriptions.Subscription.Id)
  return *id_;
}
inline void Subscription::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Employees.Subscriptions.Subscription.Id)
}
inline void Subscription::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Employees.Subscriptions.Subscription.Id)
}
inline void Subscription::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Employees.Subscriptions.Subscription.Id)
}
inline ::std::string* Subscription::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.Subscriptions.Subscription.Id)
  return id_;
}
inline ::std::string* Subscription::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Subscription::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Employees.Subscriptions.Subscription.Id)
}

// required bool IsSubscribed = 2;
inline bool Subscription::has_issubscribed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Subscription::set_has_issubscribed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Subscription::clear_has_issubscribed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Subscription::clear_issubscribed() {
  issubscribed_ = false;
  clear_has_issubscribed();
}
inline bool Subscription::issubscribed() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.Subscriptions.Subscription.IsSubscribed)
  return issubscribed_;
}
inline void Subscription::set_issubscribed(bool value) {
  set_has_issubscribed();
  issubscribed_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Employees.Subscriptions.Subscription.IsSubscribed)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Subscriptions
}  // namespace Employees
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Employees_2fSubscriptions_2fSubscription_2eproto__INCLUDED
